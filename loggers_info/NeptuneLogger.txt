<class 'pytorch_lightning.loggers.neptune.NeptuneLogger'>
Here is the list of contents
__module__
pytorch_lightning.loggers.neptune
__doc__

    Log using `Neptune <https://neptune.ai>`_.

    Install it with pip:

    .. code-block:: bash

        pip install neptune-client

    or conda:

    .. code-block:: bash

        conda install -c conda-forge neptune-client

    **Quickstart**

    Pass NeptuneLogger instance to the Trainer to log metadata with Neptune:

    .. code-block:: python


        from pytorch_lightning import Trainer
        from pytorch_lightning.loggers import NeptuneLogger

        neptune_logger = NeptuneLogger(
            api_key="ANONYMOUS",  # replace with your own
            project="common/pytorch-lightning-integration",  # format "<WORKSPACE/PROJECT>"
            tags=["training", "resnet"],  # optional
        )
        trainer = Trainer(max_epochs=10, logger=neptune_logger)

    **How to use NeptuneLogger?**

    Use the logger anywhere in your :class:`~pytorch_lightning.core.lightning.LightningModule` as follows:

    .. code-block:: python

        from neptune.new.types import File
        from pytorch_lightning import LightningModule


        class LitModel(LightningModule):
            def training_step(self, batch, batch_idx):
                # log metrics
                acc = ...
                self.log("train/loss", loss)

            def any_lightning_module_function_or_hook(self):
                # log images
                img = ...
                self.logger.experiment["train/misclassified_images"].log(File.as_image(img))

                # generic recipe
                metadata = ...
                self.logger.experiment["your/metadata/structure"].log(metadata)

    Note that syntax: ``self.logger.experiment["your/metadata/structure"].log(metadata)`` is specific to Neptune
    and it extends logger capabilities. Specifically, it allows you to log various types of metadata
    like scores, files, images, interactive visuals, CSVs, etc.
    Refer to the `Neptune docs <https://docs.neptune.ai/you-should-know/logging-metadata#essential-logging-methods>`_
    for more detailed explanations.
    You can also use regular logger methods ``log_metrics()``, and ``log_hyperparams()`` with NeptuneLogger
    as these are also supported.

    **Log after fitting or testing is finished**

    You can log objects after the fitting or testing methods are finished:

    .. code-block:: python

        neptune_logger = NeptuneLogger(project="common/pytorch-lightning-integration")

        trainer = pl.Trainer(logger=neptune_logger)
        model = ...
        datamodule = ...
        trainer.fit(model, datamodule=datamodule)
        trainer.test(model, datamodule=datamodule)

        # Log objects after `fit` or `test` methods
        # model summary
        neptune_logger.log_model_summary(model=model, max_depth=-1)

        # generic recipe
        metadata = ...
        neptune_logger.experiment["your/metadata/structure"].log(metadata)

    **Log model checkpoints**

    If you have :class:`~pytorch_lightning.callbacks.ModelCheckpoint` configured,
    Neptune logger automatically logs model checkpoints.
    Model weights will be uploaded to the: "model/checkpoints" namespace in the Neptune Run.
    You can disable this option:

    .. code-block:: python

        neptune_logger = NeptuneLogger(project="common/pytorch-lightning-integration", log_model_checkpoints=False)

    **Pass additional parameters to the Neptune run**

    You can also pass ``neptune_run_kwargs`` to specify the run in the greater detail, like ``tags`` or ``description``:

    .. testcode::

        from pytorch_lightning import Trainer
        from pytorch_lightning.loggers import NeptuneLogger

        neptune_logger = NeptuneLogger(
            project="common/pytorch-lightning-integration",
            name="lightning-run",
            description="mlp quick run with pytorch-lightning",
            tags=["mlp", "quick-run"],
        )
        trainer = Trainer(max_epochs=3, logger=neptune_logger)

    Check `run documentation <https://docs.neptune.ai/essentials/api-reference/run>`_
    for more info about additional run parameters.

    **Details about Neptune run structure**

    Runs can be viewed as nested dictionary-like structures that you can define in your code.
    Thanks to this you can easily organize your metadata in a way that is most convenient for you.

    The hierarchical structure that you apply to your metadata will be reflected later in the UI.

    You can organize this way any type of metadata - images, parameters, metrics, model checkpoint, CSV files, etc.

    See Also:
        - Read about
          `what object you can log to Neptune <https://docs.neptune.ai/you-should-know/what-can-you-log-and-display>`_.
        - Check `example run <https://app.neptune.ai/o/common/org/pytorch-lightning-integration/e/PTL-1/all>`_
          with multiple types of metadata logged.
        - For more detailed info check
          `user guide <https://docs.neptune.ai/integrations-and-supported-tools/model-training/pytorch-lightning>`_.

    Args:
        api_key: Optional.
            Neptune API token, found on https://neptune.ai upon registration.
            Read: `how to find and set Neptune API token <https://docs.neptune.ai/administration/security-and-privacy/
            how-to-find-and-set-neptune-api-token>`_.
            It is recommended to keep it in the `NEPTUNE_API_TOKEN`
            environment variable and then you can drop ``api_key=None``.
        project: Optional.
            Name of a project in a form of "my_workspace/my_project" for example "tom/mask-rcnn".
            If ``None``, the value of `NEPTUNE_PROJECT` environment variable will be taken.
            You need to create the project in https://neptune.ai first.
        name: Optional. Editable name of the run.
            Run name appears in the "all metadata/sys" section in Neptune UI.
        run: Optional. Default is ``None``. The Neptune ``Run`` object.
            If specified, this `Run`` will be used for logging, instead of a new Run.
            When run object is passed you can't specify other neptune properties.
        log_model_checkpoints: Optional. Default is ``True``. Log model checkpoint to Neptune.
            Works only if ``ModelCheckpoint`` is passed to the ``Trainer``.
        prefix: Optional. Default is ``"training"``. Root namespace for all metadata logging.
        \**neptune_run_kwargs: Additional arguments like ``tags``, ``description``, ``capture_stdout``, etc.
            used when run is created.

    Raises:
        ModuleNotFoundError:
            If required Neptune package in version >=0.9 is not installed on the device.
        TypeError:
            If configured project has not been migrated to new structure yet.
        ValueError:
            If argument passed to the logger's constructor is incorrect.
    
LOGGER_JOIN_CHAR
/
PARAMETERS_KEY
hyperparams
ARTIFACTS_KEY
artifacts
__init__
<function NeptuneLogger.__init__ at 0x0000025AD02D9820>
_init_run_instance
<function NeptuneLogger._init_run_instance at 0x0000025AD02D98B0>
_construct_path_with_prefix
<function NeptuneLogger._construct_path_with_prefix at 0x0000025AD02D9940>
_verify_input_arguments
<staticmethod object at 0x0000025ACF21D2B0>
__getstate__
<function NeptuneLogger.__getstate__ at 0x0000025AD02D9A60>
__setstate__
<function NeptuneLogger.__setstate__ at 0x0000025AD02D9AF0>
experiment
<property object at 0x0000025ACF213C70>
run
<property object at 0x0000025AD02E1130>
log_hyperparams
<function NeptuneLogger.log_hyperparams at 0x0000025AD02D9DC0>
log_metrics
<function NeptuneLogger.log_metrics at 0x0000025AD02D9EE0>
finalize
<function NeptuneLogger.finalize at 0x0000025AD02E3040>
save_dir
<property object at 0x0000025ACF1E0B80>
log_model_summary
<function NeptuneLogger.log_model_summary at 0x0000025AD02E3160>
after_save_checkpoint
<function NeptuneLogger.after_save_checkpoint at 0x0000025AD02E31F0>
_get_full_model_name
<staticmethod object at 0x0000025AD02DABB0>
_get_full_model_names_from_exp_structure
<classmethod object at 0x0000025AD02DABE0>
_dict_paths
<classmethod object at 0x0000025AD02DACA0>
name
<property object at 0x0000025AD02E1220>
version
<property object at 0x0000025AD02E1270>
_signal_deprecated_api_usage
<staticmethod object at 0x0000025AD02DAD00>
log_metric
<function NeptuneLogger.log_metric at 0x0000025AD02E3670>
log_text
<function NeptuneLogger.log_text at 0x0000025AD02E3790>
log_image
<function NeptuneLogger.log_image at 0x0000025AD02E38B0>
log_artifact
<function NeptuneLogger.log_artifact at 0x0000025AD02E39D0>
set_property
<function NeptuneLogger.set_property at 0x0000025AD02E3AF0>
append_tags
<function NeptuneLogger.append_tags at 0x0000025AD02E3C10>
__abstractmethods__
frozenset()
_abc_impl
<_abc._abc_data object at 0x0000025AD02E5240>
