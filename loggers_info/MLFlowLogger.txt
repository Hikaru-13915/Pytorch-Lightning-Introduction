<class 'pytorch_lightning.loggers.mlflow.MLFlowLogger'>
Here is the list of contents
__module__
pytorch_lightning.loggers.mlflow
__doc__
Log using `MLflow <https://mlflow.org>`_.

    Install it with pip:

    .. code-block:: bash

        pip install mlflow

    .. code-block:: python

        from pytorch_lightning import Trainer
        from pytorch_lightning.loggers import MLFlowLogger

        mlf_logger = MLFlowLogger(experiment_name="default", tracking_uri="file:./ml-runs")
        trainer = Trainer(logger=mlf_logger)

    Use the logger anywhere in your :class:`~pytorch_lightning.core.lightning.LightningModule` as follows:

    .. code-block:: python

        from pytorch_lightning import LightningModule


        class LitModel(LightningModule):
            def training_step(self, batch, batch_idx):
                # example
                self.logger.experiment.whatever_ml_flow_supports(...)

            def any_lightning_module_function_or_hook(self):
                self.logger.experiment.whatever_ml_flow_supports(...)

    Args:
        experiment_name: The name of the experiment
        run_name: Name of the new run. The `run_name` is internally stored as a ``mlflow.runName`` tag.
            If the ``mlflow.runName`` tag has already been set in `tags`, the value is overridden by the `run_name`.
        tracking_uri: Address of local or remote tracking server.
            If not provided, defaults to `MLFLOW_TRACKING_URI` environment variable if set, otherwise it falls
            back to `file:<save_dir>`.
        tags: A dictionary tags for the experiment.
        save_dir: A path to a local directory where the MLflow runs get saved.
            Defaults to `./mlflow` if `tracking_uri` is not provided.
            Has no effect if `tracking_uri` is provided.
        prefix: A string to put at the beginning of metric keys.
        artifact_location: The location to store run artifacts. If not provided, the server picks an appropriate
            default.

    Raises:
        ModuleNotFoundError:
            If required MLFlow package is not installed on the device.
    
LOGGER_JOIN_CHAR
-
__init__
<function MLFlowLogger.__init__ at 0x0000025ACEF209D0>
experiment
<property object at 0x0000025ACEF22A90>
run_id
<property object at 0x0000025ACEF22A40>
experiment_id
<property object at 0x0000025ACEF22CC0>
log_hyperparams
<function MLFlowLogger.log_hyperparams at 0x0000025AD02D9160>
log_metrics
<function MLFlowLogger.log_metrics at 0x0000025AD02D9280>
finalize
<function MLFlowLogger.finalize at 0x0000025AD02D93A0>
save_dir
<property object at 0x0000025AD02D60E0>
name
<property object at 0x0000025AD02D6180>
version
<property object at 0x0000025AD02D61D0>
__abstractmethods__
frozenset()
_abc_impl
<_abc._abc_data object at 0x0000025AD02D7840>
