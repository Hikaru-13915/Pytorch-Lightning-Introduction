<class 'pytorch_lightning.loggers.csv_logs.CSVLogger'>
Here is the list of contents
__module__
pytorch_lightning.loggers.csv_logs
__doc__

    Log to local file system in yaml and CSV format.

    Logs are saved to ``os.path.join(save_dir, name, version)``.

    Example:
        >>> from pytorch_lightning import Trainer
        >>> from pytorch_lightning.loggers import CSVLogger
        >>> logger = CSVLogger("logs", name="my_exp_name")
        >>> trainer = Trainer(logger=logger)

    Args:
        save_dir: Save directory
        name: Experiment name. Defaults to ``'default'``.
        version: Experiment version. If version is not specified the logger inspects the save
            directory for existing versions, then automatically assigns the next available version.
        prefix: A string to put at the beginning of metric keys.
        flush_logs_every_n_steps: How often to flush logs to disk (defaults to every 100 steps).
    
LOGGER_JOIN_CHAR
-
__init__
<function CSVLogger.__init__ at 0x0000021BFC493550>
root_dir
<property object at 0x0000021BFC499400>
log_dir
<property object at 0x0000021BFC499450>
save_dir
<property object at 0x0000021BFC4994A0>
experiment
<property object at 0x0000021BFC4994F0>
log_hyperparams
<function CSVLogger.log_hyperparams at 0x0000021BFC493940>
log_metrics
<function CSVLogger.log_metrics at 0x0000021BFC493A60>
save
<function CSVLogger.save at 0x0000021BFC493B80>
finalize
<function CSVLogger.finalize at 0x0000021BFC493CA0>
name
<property object at 0x0000021BFC499540>
version
<property object at 0x0000021BFC499590>
_get_next_version
<function CSVLogger._get_next_version at 0x0000021BFC493E50>
__abstractmethods__
frozenset()
_abc_impl
<_abc._abc_data object at 0x0000021BFC498D40>
<class 'pytorch_lightning.loggers.csv_logs.CSVLogger'>
Here is the list of contents
__module__
pytorch_lightning.loggers.csv_logs
__doc__

    Log to local file system in yaml and CSV format.

    Logs are saved to ``os.path.join(save_dir, name, version)``.

    Example:
        >>> from pytorch_lightning import Trainer
        >>> from pytorch_lightning.loggers import CSVLogger
        >>> logger = CSVLogger("logs", name="my_exp_name")
        >>> trainer = Trainer(logger=logger)

    Args:
        save_dir: Save directory
        name: Experiment name. Defaults to ``'default'``.
        version: Experiment version. If version is not specified the logger inspects the save
            directory for existing versions, then automatically assigns the next available version.
        prefix: A string to put at the beginning of metric keys.
        flush_logs_every_n_steps: How often to flush logs to disk (defaults to every 100 steps).
    
LOGGER_JOIN_CHAR
-
__init__
<function CSVLogger.__init__ at 0x0000025ACE643550>
root_dir
<property object at 0x0000025ACE6493B0>
log_dir
<property object at 0x0000025ACE649400>
save_dir
<property object at 0x0000025ACE649450>
experiment
<property object at 0x0000025ACE6494A0>
log_hyperparams
<function CSVLogger.log_hyperparams at 0x0000025ACE643940>
log_metrics
<function CSVLogger.log_metrics at 0x0000025ACE643A60>
save
<function CSVLogger.save at 0x0000025ACE643B80>
finalize
<function CSVLogger.finalize at 0x0000025ACE643CA0>
name
<property object at 0x0000025ACE6494F0>
version
<property object at 0x0000025ACE649540>
_get_next_version
<function CSVLogger._get_next_version at 0x0000025ACE643E50>
__abstractmethods__
frozenset()
_abc_impl
<_abc._abc_data object at 0x0000025ACE64B200>
